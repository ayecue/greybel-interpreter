// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interpreter default scripts binary-expressions.src 1`] = `
CustomNumber {
  "value": 1.5,
}
`;

exports[`interpreter default scripts binary-expressions.src 2`] = `
CustomNumber {
  "value": 600,
}
`;

exports[`interpreter default scripts binary-expressions.src 3`] = `
CustomNumber {
  "value": 10,
}
`;

exports[`interpreter default scripts binary-expressions.src 4`] = `
CustomNumber {
  "value": 50,
}
`;

exports[`interpreter default scripts binary-expressions.src 5`] = `
CustomNumber {
  "value": 31457280,
}
`;

exports[`interpreter default scripts binary-expressions.src 6`] = `
CustomNumber {
  "value": 0,
}
`;

exports[`interpreter default scripts binary-expressions.src 7`] = `
CustomNumber {
  "value": 0,
}
`;

exports[`interpreter default scripts binary-expressions.src 8`] = `
CustomNumber {
  "value": 30,
}
`;

exports[`interpreter default scripts binary-expressions.src 9`] = `
CustomNumber {
  "value": 20,
}
`;

exports[`interpreter default scripts binary-expressions.src 10`] = `
CustomNumber {
  "value": 10,
}
`;

exports[`interpreter default scripts binary-expressions.src 11`] = `20`;

exports[`interpreter default scripts binary-expressions.src 12`] = `true`;

exports[`interpreter default scripts negation.src 1`] = `
CustomNumber {
  "value": 2,
}
`;

exports[`interpreter default scripts negation.src 2`] = `
CustomList {
  "slice": [Function],
  "value": Array [
    CustomNumber {
      "value": -1,
    },
    CustomNumber {
      "value": 2,
    },
    CustomNumber {
      "value": 0,
    },
  ],
}
`;

exports[`interpreter default scripts obj-init.src 1`] = `
CustomList {
  "slice": [Function],
  "value": Array [
    CustomString {
      "value": "123",
    },
    CustomString {
      "value": "123",
    },
    CustomString {
      "value": "foo",
    },
  ],
}
`;

exports[`interpreter default scripts obj-init.src 2`] = `
CustomList {
  "slice": [Function],
  "value": Array [
    CustomMap {
      "isInstance": false,
      "value": Object {
        "another": CustomString {
          "value": "123",
        },
      },
    },
    CustomString {
      "value": "123",
    },
    CustomString {
      "value": "foo",
    },
  ],
}
`;

exports[`interpreter default scripts print.src 1`] = `
CustomNumber {
  "value": 123,
}
`;

exports[`interpreter default scripts simple-object.src 1`] = `
CustomString {
  "value": "was",
}
`;

exports[`interpreter default scripts simple-object.src 2`] = `null`;

exports[`interpreter default scripts slice.src 1`] = `
CustomList {
  "slice": [Function],
  "value": Array [
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "blahh",
    },
    CustomString {
      "value": "gad",
    },
  ],
}
`;

exports[`interpreter default scripts unary.src 1`] = `true`;

exports[`interpreter default scripts unary.src 2`] = `
Object {
  "globals": Scope {
    "context": OperationContext {
      "cps": CPS {
        "cpsMap": Object {
          "AssignmentStatement": [Function],
          "BinaryExpression": [Function],
          "BinaryNegatedExpression": [Function],
          "BooleanLiteral": [Function],
          "BreakStatement": [Function],
          "CallExpression": [Function],
          "CallStatement": [Function],
          "Chunk": [Function],
          "ContinueStatement": [Function],
          "ElseClause": [Function],
          "ElseShortcutClause": [Function],
          "ElseifClause": [Function],
          "ElseifShortcutClause": [Function],
          "EmptyExpression": [Function],
          "FeatureDebuggerExpression": [Function],
          "FeatureEnvarExpression": [Function],
          "FeatureImportExpression": [Function],
          "FeatureIncludeExpression": [Function],
          "ForGenericStatement": [Function],
          "FunctionDeclaration": [Function],
          "Identifier": [Function],
          "IfClause": [Function],
          "IfShortcutClause": [Function],
          "IfShortcutStatement": [Function],
          "IfStatement": [Function],
          "ImportCodeExpression": [Function],
          "IndexExpression": [Function],
          "ListConstructorExpression": [Function],
          "LogicalExpression": [Function],
          "MapConstructorExpression": [Function],
          "MemberExpression": [Function],
          "NegationExpression": [Function],
          "NilLiteral": [Function],
          "NumericLiteral": [Function],
          "ReturnStatement": [Function],
          "StringLiteral": [Function],
          "UnaryExpression": [Function],
          "WhileStatement": [Function],
        },
      },
      "debugger": TestDebugger {
        "breakpoint": false,
        "lastContext": null,
        "nextStep": false,
      },
      "isProtected": false,
      "memory": Map {
        "loopContext" => undefined,
        "functionContext" => undefined,
      },
      "previous": OperationContext {
        "cps": CPS {
          "cpsMap": Object {
            "AssignmentStatement": [Function],
            "BinaryExpression": [Function],
            "BinaryNegatedExpression": [Function],
            "BooleanLiteral": [Function],
            "BreakStatement": [Function],
            "CallExpression": [Function],
            "CallStatement": [Function],
            "Chunk": [Function],
            "ContinueStatement": [Function],
            "ElseClause": [Function],
            "ElseShortcutClause": [Function],
            "ElseifClause": [Function],
            "ElseifShortcutClause": [Function],
            "EmptyExpression": [Function],
            "FeatureDebuggerExpression": [Function],
            "FeatureEnvarExpression": [Function],
            "FeatureImportExpression": [Function],
            "FeatureIncludeExpression": [Function],
            "ForGenericStatement": [Function],
            "FunctionDeclaration": [Function],
            "Identifier": [Function],
            "IfClause": [Function],
            "IfShortcutClause": [Function],
            "IfShortcutStatement": [Function],
            "IfStatement": [Function],
            "ImportCodeExpression": [Function],
            "IndexExpression": [Function],
            "ListConstructorExpression": [Function],
            "LogicalExpression": [Function],
            "MapConstructorExpression": [Function],
            "MemberExpression": [Function],
            "NegationExpression": [Function],
            "NilLiteral": [Function],
            "NumericLiteral": [Function],
            "ReturnStatement": [Function],
            "StringLiteral": [Function],
            "UnaryExpression": [Function],
            "WhileStatement": [Function],
          },
        },
        "debugger": TestDebugger {
          "breakpoint": false,
          "lastContext": null,
          "nextStep": false,
        },
        "isProtected": true,
        "memory": Map {},
        "previous": null,
        "scope": Scope {
          "context": [Circular],
          "refs": Object {
            "params": CustomList {
              "slice": [Function],
              "value": Array [],
            },
            "print": [Function],
          },
        },
        "state": "DEFAULT",
        "type": "API",
      },
      "scope": [Circular],
      "state": "DEFAULT",
      "type": "GLOBAL",
    },
    "refs": Object {
      "globals": [Circular],
      "locals": Scope {
        "context": OperationContext {
          "cps": CPS {
            "cpsMap": Object {
              "AssignmentStatement": [Function],
              "BinaryExpression": [Function],
              "BinaryNegatedExpression": [Function],
              "BooleanLiteral": [Function],
              "BreakStatement": [Function],
              "CallExpression": [Function],
              "CallStatement": [Function],
              "Chunk": [Function],
              "ContinueStatement": [Function],
              "ElseClause": [Function],
              "ElseShortcutClause": [Function],
              "ElseifClause": [Function],
              "ElseifShortcutClause": [Function],
              "EmptyExpression": [Function],
              "FeatureDebuggerExpression": [Function],
              "FeatureEnvarExpression": [Function],
              "FeatureImportExpression": [Function],
              "FeatureIncludeExpression": [Function],
              "ForGenericStatement": [Function],
              "FunctionDeclaration": [Function],
              "Identifier": [Function],
              "IfClause": [Function],
              "IfShortcutClause": [Function],
              "IfShortcutStatement": [Function],
              "IfStatement": [Function],
              "ImportCodeExpression": [Function],
              "IndexExpression": [Function],
              "ListConstructorExpression": [Function],
              "LogicalExpression": [Function],
              "MapConstructorExpression": [Function],
              "MemberExpression": [Function],
              "NegationExpression": [Function],
              "NilLiteral": [Function],
              "NumericLiteral": [Function],
              "ReturnStatement": [Function],
              "StringLiteral": [Function],
              "UnaryExpression": [Function],
              "WhileStatement": [Function],
            },
          },
          "debugger": TestDebugger {
            "breakpoint": false,
            "lastContext": null,
            "nextStep": false,
          },
          "isProtected": false,
          "memory": Map {
            "loopContext" => undefined,
            "functionContext" => undefined,
            "args" => Array [
              CustomNumber {
                "value": -3,
              },
            ],
          },
          "previous": OperationContext {
            "cps": CPS {
              "cpsMap": Object {
                "AssignmentStatement": [Function],
                "BinaryExpression": [Function],
                "BinaryNegatedExpression": [Function],
                "BooleanLiteral": [Function],
                "BreakStatement": [Function],
                "CallExpression": [Function],
                "CallStatement": [Function],
                "Chunk": [Function],
                "ContinueStatement": [Function],
                "ElseClause": [Function],
                "ElseShortcutClause": [Function],
                "ElseifClause": [Function],
                "ElseifShortcutClause": [Function],
                "EmptyExpression": [Function],
                "FeatureDebuggerExpression": [Function],
                "FeatureEnvarExpression": [Function],
                "FeatureImportExpression": [Function],
                "FeatureIncludeExpression": [Function],
                "ForGenericStatement": [Function],
                "FunctionDeclaration": [Function],
                "Identifier": [Function],
                "IfClause": [Function],
                "IfShortcutClause": [Function],
                "IfShortcutStatement": [Function],
                "IfStatement": [Function],
                "ImportCodeExpression": [Function],
                "IndexExpression": [Function],
                "ListConstructorExpression": [Function],
                "LogicalExpression": [Function],
                "MapConstructorExpression": [Function],
                "MemberExpression": [Function],
                "NegationExpression": [Function],
                "NilLiteral": [Function],
                "NumericLiteral": [Function],
                "ReturnStatement": [Function],
                "StringLiteral": [Function],
                "UnaryExpression": [Function],
                "WhileStatement": [Function],
              },
            },
            "debugger": TestDebugger {
              "breakpoint": false,
              "lastContext": null,
              "nextStep": false,
            },
            "isProtected": false,
            "memory": Map {
              "loopContext" => undefined,
              "functionContext" => undefined,
            },
            "previous": OperationContext {
              "cps": CPS {
                "cpsMap": Object {
                  "AssignmentStatement": [Function],
                  "BinaryExpression": [Function],
                  "BinaryNegatedExpression": [Function],
                  "BooleanLiteral": [Function],
                  "BreakStatement": [Function],
                  "CallExpression": [Function],
                  "CallStatement": [Function],
                  "Chunk": [Function],
                  "ContinueStatement": [Function],
                  "ElseClause": [Function],
                  "ElseShortcutClause": [Function],
                  "ElseifClause": [Function],
                  "ElseifShortcutClause": [Function],
                  "EmptyExpression": [Function],
                  "FeatureDebuggerExpression": [Function],
                  "FeatureEnvarExpression": [Function],
                  "FeatureImportExpression": [Function],
                  "FeatureIncludeExpression": [Function],
                  "ForGenericStatement": [Function],
                  "FunctionDeclaration": [Function],
                  "Identifier": [Function],
                  "IfClause": [Function],
                  "IfShortcutClause": [Function],
                  "IfShortcutStatement": [Function],
                  "IfStatement": [Function],
                  "ImportCodeExpression": [Function],
                  "IndexExpression": [Function],
                  "ListConstructorExpression": [Function],
                  "LogicalExpression": [Function],
                  "MapConstructorExpression": [Function],
                  "MemberExpression": [Function],
                  "NegationExpression": [Function],
                  "NilLiteral": [Function],
                  "NumericLiteral": [Function],
                  "ReturnStatement": [Function],
                  "StringLiteral": [Function],
                  "UnaryExpression": [Function],
                  "WhileStatement": [Function],
                },
              },
              "debugger": TestDebugger {
                "breakpoint": false,
                "lastContext": null,
                "nextStep": false,
              },
              "isProtected": true,
              "memory": Map {},
              "previous": null,
              "scope": Scope {
                "context": [Circular],
                "refs": Object {
                  "params": CustomList {
                    "slice": [Function],
                    "value": Array [],
                  },
                  "print": [Function],
                },
              },
              "state": "DEFAULT",
              "type": "API",
            },
            "scope": [Circular],
            "state": "DEFAULT",
            "type": "GLOBAL",
          },
          "scope": [Circular],
          "state": "TEMPORARY",
          "type": "CALL",
        },
        "refs": Object {},
      },
      "test": FunctionOperation {
        "args": ArgumentOperation {
          "ast": Array [],
          "stack": Array [],
        },
        "ast": Object {
          "body": Array [
            Object {
              "argument": Object {
                "line": 2,
                "raw": "null",
                "type": "NilLiteral",
                "value": null,
              },
              "line": 2,
              "type": "ReturnStatement",
            },
          ],
          "line": 1,
          "parameters": Array [],
          "type": "FunctionDeclaration",
        },
        "body": BodyOperation {
          "ast": Array [
            Object {
              "argument": Object {
                "line": 2,
                "raw": "null",
                "type": "NilLiteral",
                "value": null,
              },
              "line": 2,
              "type": "ReturnStatement",
            },
          ],
          "stack": Array [
            ReturnOperation {
              "arg": CustomNil {
                "value": null,
              },
              "ast": Object {
                "argument": Object {
                  "line": 2,
                  "raw": "null",
                  "type": "NilLiteral",
                  "value": null,
                },
                "line": 2,
                "type": "ReturnStatement",
              },
            },
          ],
        },
        "context": null,
        "id": "a04183a4-da55-43c4-a7d1-95172a5b07e1",
      },
    },
  },
  "locals": Scope {
    "context": OperationContext {
      "cps": CPS {
        "cpsMap": Object {
          "AssignmentStatement": [Function],
          "BinaryExpression": [Function],
          "BinaryNegatedExpression": [Function],
          "BooleanLiteral": [Function],
          "BreakStatement": [Function],
          "CallExpression": [Function],
          "CallStatement": [Function],
          "Chunk": [Function],
          "ContinueStatement": [Function],
          "ElseClause": [Function],
          "ElseShortcutClause": [Function],
          "ElseifClause": [Function],
          "ElseifShortcutClause": [Function],
          "EmptyExpression": [Function],
          "FeatureDebuggerExpression": [Function],
          "FeatureEnvarExpression": [Function],
          "FeatureImportExpression": [Function],
          "FeatureIncludeExpression": [Function],
          "ForGenericStatement": [Function],
          "FunctionDeclaration": [Function],
          "Identifier": [Function],
          "IfClause": [Function],
          "IfShortcutClause": [Function],
          "IfShortcutStatement": [Function],
          "IfStatement": [Function],
          "ImportCodeExpression": [Function],
          "IndexExpression": [Function],
          "ListConstructorExpression": [Function],
          "LogicalExpression": [Function],
          "MapConstructorExpression": [Function],
          "MemberExpression": [Function],
          "NegationExpression": [Function],
          "NilLiteral": [Function],
          "NumericLiteral": [Function],
          "ReturnStatement": [Function],
          "StringLiteral": [Function],
          "UnaryExpression": [Function],
          "WhileStatement": [Function],
        },
      },
      "debugger": TestDebugger {
        "breakpoint": false,
        "lastContext": null,
        "nextStep": false,
      },
      "isProtected": false,
      "memory": Map {
        "loopContext" => undefined,
        "functionContext" => undefined,
        "args" => Array [
          [Circular],
        ],
      },
      "previous": OperationContext {
        "cps": CPS {
          "cpsMap": Object {
            "AssignmentStatement": [Function],
            "BinaryExpression": [Function],
            "BinaryNegatedExpression": [Function],
            "BooleanLiteral": [Function],
            "BreakStatement": [Function],
            "CallExpression": [Function],
            "CallStatement": [Function],
            "Chunk": [Function],
            "ContinueStatement": [Function],
            "ElseClause": [Function],
            "ElseShortcutClause": [Function],
            "ElseifClause": [Function],
            "ElseifShortcutClause": [Function],
            "EmptyExpression": [Function],
            "FeatureDebuggerExpression": [Function],
            "FeatureEnvarExpression": [Function],
            "FeatureImportExpression": [Function],
            "FeatureIncludeExpression": [Function],
            "ForGenericStatement": [Function],
            "FunctionDeclaration": [Function],
            "Identifier": [Function],
            "IfClause": [Function],
            "IfShortcutClause": [Function],
            "IfShortcutStatement": [Function],
            "IfStatement": [Function],
            "ImportCodeExpression": [Function],
            "IndexExpression": [Function],
            "ListConstructorExpression": [Function],
            "LogicalExpression": [Function],
            "MapConstructorExpression": [Function],
            "MemberExpression": [Function],
            "NegationExpression": [Function],
            "NilLiteral": [Function],
            "NumericLiteral": [Function],
            "ReturnStatement": [Function],
            "StringLiteral": [Function],
            "UnaryExpression": [Function],
            "WhileStatement": [Function],
          },
        },
        "debugger": TestDebugger {
          "breakpoint": false,
          "lastContext": null,
          "nextStep": false,
        },
        "isProtected": false,
        "memory": Map {
          "loopContext" => undefined,
          "functionContext" => undefined,
        },
        "previous": OperationContext {
          "cps": CPS {
            "cpsMap": Object {
              "AssignmentStatement": [Function],
              "BinaryExpression": [Function],
              "BinaryNegatedExpression": [Function],
              "BooleanLiteral": [Function],
              "BreakStatement": [Function],
              "CallExpression": [Function],
              "CallStatement": [Function],
              "Chunk": [Function],
              "ContinueStatement": [Function],
              "ElseClause": [Function],
              "ElseShortcutClause": [Function],
              "ElseifClause": [Function],
              "ElseifShortcutClause": [Function],
              "EmptyExpression": [Function],
              "FeatureDebuggerExpression": [Function],
              "FeatureEnvarExpression": [Function],
              "FeatureImportExpression": [Function],
              "FeatureIncludeExpression": [Function],
              "ForGenericStatement": [Function],
              "FunctionDeclaration": [Function],
              "Identifier": [Function],
              "IfClause": [Function],
              "IfShortcutClause": [Function],
              "IfShortcutStatement": [Function],
              "IfStatement": [Function],
              "ImportCodeExpression": [Function],
              "IndexExpression": [Function],
              "ListConstructorExpression": [Function],
              "LogicalExpression": [Function],
              "MapConstructorExpression": [Function],
              "MemberExpression": [Function],
              "NegationExpression": [Function],
              "NilLiteral": [Function],
              "NumericLiteral": [Function],
              "ReturnStatement": [Function],
              "StringLiteral": [Function],
              "UnaryExpression": [Function],
              "WhileStatement": [Function],
            },
          },
          "debugger": TestDebugger {
            "breakpoint": false,
            "lastContext": null,
            "nextStep": false,
          },
          "isProtected": true,
          "memory": Map {},
          "previous": null,
          "scope": Scope {
            "context": [Circular],
            "refs": Object {
              "params": CustomList {
                "slice": [Function],
                "value": Array [],
              },
              "print": [Function],
            },
          },
          "state": "DEFAULT",
          "type": "API",
        },
        "scope": Scope {
          "context": [Circular],
          "refs": Object {
            "globals": [Circular],
            "locals": Scope {
              "context": OperationContext {
                "cps": CPS {
                  "cpsMap": Object {
                    "AssignmentStatement": [Function],
                    "BinaryExpression": [Function],
                    "BinaryNegatedExpression": [Function],
                    "BooleanLiteral": [Function],
                    "BreakStatement": [Function],
                    "CallExpression": [Function],
                    "CallStatement": [Function],
                    "Chunk": [Function],
                    "ContinueStatement": [Function],
                    "ElseClause": [Function],
                    "ElseShortcutClause": [Function],
                    "ElseifClause": [Function],
                    "ElseifShortcutClause": [Function],
                    "EmptyExpression": [Function],
                    "FeatureDebuggerExpression": [Function],
                    "FeatureEnvarExpression": [Function],
                    "FeatureImportExpression": [Function],
                    "FeatureIncludeExpression": [Function],
                    "ForGenericStatement": [Function],
                    "FunctionDeclaration": [Function],
                    "Identifier": [Function],
                    "IfClause": [Function],
                    "IfShortcutClause": [Function],
                    "IfShortcutStatement": [Function],
                    "IfStatement": [Function],
                    "ImportCodeExpression": [Function],
                    "IndexExpression": [Function],
                    "ListConstructorExpression": [Function],
                    "LogicalExpression": [Function],
                    "MapConstructorExpression": [Function],
                    "MemberExpression": [Function],
                    "NegationExpression": [Function],
                    "NilLiteral": [Function],
                    "NumericLiteral": [Function],
                    "ReturnStatement": [Function],
                    "StringLiteral": [Function],
                    "UnaryExpression": [Function],
                    "WhileStatement": [Function],
                  },
                },
                "debugger": TestDebugger {
                  "breakpoint": false,
                  "lastContext": null,
                  "nextStep": false,
                },
                "isProtected": false,
                "memory": Map {
                  "loopContext" => undefined,
                  "functionContext" => undefined,
                  "args" => Array [
                    CustomNumber {
                      "value": -3,
                    },
                  ],
                },
                "previous": [Circular],
                "scope": [Circular],
                "state": "TEMPORARY",
                "type": "CALL",
              },
              "refs": Object {},
            },
            "test": FunctionOperation {
              "args": ArgumentOperation {
                "ast": Array [],
                "stack": Array [],
              },
              "ast": Object {
                "body": Array [
                  Object {
                    "argument": Object {
                      "line": 2,
                      "raw": "null",
                      "type": "NilLiteral",
                      "value": null,
                    },
                    "line": 2,
                    "type": "ReturnStatement",
                  },
                ],
                "line": 1,
                "parameters": Array [],
                "type": "FunctionDeclaration",
              },
              "body": BodyOperation {
                "ast": Array [
                  Object {
                    "argument": Object {
                      "line": 2,
                      "raw": "null",
                      "type": "NilLiteral",
                      "value": null,
                    },
                    "line": 2,
                    "type": "ReturnStatement",
                  },
                ],
                "stack": Array [
                  ReturnOperation {
                    "arg": CustomNil {
                      "value": null,
                    },
                    "ast": Object {
                      "argument": Object {
                        "line": 2,
                        "raw": "null",
                        "type": "NilLiteral",
                        "value": null,
                      },
                      "line": 2,
                      "type": "ReturnStatement",
                    },
                  },
                ],
              },
              "context": null,
              "id": "a04183a4-da55-43c4-a7d1-95172a5b07e1",
            },
          },
        },
        "state": "DEFAULT",
        "type": "GLOBAL",
      },
      "scope": [Circular],
      "state": "TEMPORARY",
      "type": "CALL",
    },
    "refs": Object {},
  },
  "test": FunctionOperation {
    "args": ArgumentOperation {
      "ast": Array [],
      "stack": Array [],
    },
    "ast": Object {
      "body": Array [
        Object {
          "argument": Object {
            "line": 2,
            "raw": "null",
            "type": "NilLiteral",
            "value": null,
          },
          "line": 2,
          "type": "ReturnStatement",
        },
      ],
      "line": 1,
      "parameters": Array [],
      "type": "FunctionDeclaration",
    },
    "body": BodyOperation {
      "ast": Array [
        Object {
          "argument": Object {
            "line": 2,
            "raw": "null",
            "type": "NilLiteral",
            "value": null,
          },
          "line": 2,
          "type": "ReturnStatement",
        },
      ],
      "stack": Array [
        ReturnOperation {
          "arg": CustomNil {
            "value": null,
          },
          "ast": Object {
            "argument": Object {
              "line": 2,
              "raw": "null",
              "type": "NilLiteral",
              "value": null,
            },
            "line": 2,
            "type": "ReturnStatement",
          },
        },
      ],
    },
    "context": null,
    "id": "a04183a4-da55-43c4-a7d1-95172a5b07e1",
  },
}
`;

exports[`interpreter default scripts unary.src 3`] = `false`;

exports[`interpreter default scripts unary.src 4`] = `false`;

exports[`interpreter default scripts unary.src 5`] = `
CustomNumber {
  "value": 1,
}
`;

exports[`interpreter default scripts unary.src 6`] = `
CustomNumber {
  "value": -3,
}
`;
